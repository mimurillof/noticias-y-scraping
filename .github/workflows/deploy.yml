name: Deploy to Heroku

# Workflow de CI/CD para deployment automático a Heroku
# Ejecuta cuando se hace push a main o se crea un tag de release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Linting y validación
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          # Stop build if syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Check formatting with black
        run: |
          black --check .
        continue-on-error: true

  # Job 2: Tests unitarios (opcional - descomentar cuando existan tests)
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.9'
  #     
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pytest pytest-cov
  #         pip install -r requirements.txt
  #     
  #     - name: Run tests with coverage
  #       env:
  #         SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  #         SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  #       run: |
  #         pytest --cov=. --cov-report=xml
  #     
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: ./coverage.xml

  # Job 3: Verificación pre-deployment
  verify:
    name: Verify Deployment Readiness
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Check imports
        run: |
          python -c "import orchestrator; print('✅ Orchestrator importado')"
          python -c "import portfolio_service; print('✅ Portfolio service importado')"
          python -c "import supabase_client; print('✅ Supabase client importado')"
          python -c "import symbol_normalizer; print('✅ Symbol normalizer importado')"
      
      - name: Verify file structure
        run: |
          test -f orchestrator.py || exit 1
          test -f portfolio_service.py || exit 1
          test -f supabase_client.py || exit 1
          test -f Script_noticias.py || exit 1
          test -f requirements.txt || exit 1
          test -f Procfile || exit 1
          echo "✅ Todos los archivos esenciales presentes"

  # Job 4: Deploy a Heroku (solo en main branch)
  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: verify
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          # Opcional: variables de entorno
          # env_file: .env.production
      
      - name: Verify deployment
        run: |
          echo "✅ Deployment completado a Heroku"
          echo "App URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"

  # Job 5: Notificación (opcional)
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment exitoso!"
          # Agregar notificación a Slack/Discord si es necesario
      
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment falló"
          # Agregar notificación a Slack/Discord si es necesario
